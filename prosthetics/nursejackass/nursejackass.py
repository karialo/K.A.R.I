# Autogenerated module for K.A.R.I.

import os
from core.logger import log_system, log_kari
from core.personality import get_phrase

# Optional internal: MemoryCortex. Fallback mood='neutral' if unavailable.
try:
    from internal.memory_cortex.memory_cortex import MemoryCortex
except Exception:
    MemoryCortex = None  # type: ignore

# Optional global settings: DEBUG flag (env overrides settings if present).
try:
    from core import settings as _kari_settings  # may define DEBUG
    DEBUG = bool(int(os.environ.get("KARI_DEBUG", "0"))) or bool(getattr(_kari_settings, "DEBUG", False))
except Exception:
    DEBUG = bool(int(os.environ.get("KARI_DEBUG", "0")))

meta_data = {
    "name": "Nursejackass",
    "version": "1.0",
    "author": "Change me",
    "description": "Description here",
    "category": "prosthetic",
    "actions": ['scanPorts', 'sarcasticComment', 'helpfulComment'],
    "manual_actions": [
        { "name": "Report Module Alive", "function": "report_alive" },
        { "name": "Display Module Info", "function": "display_info" }
    ],
    "pulse": ["pulse"],
    "capabilities": ["neural_sync"],
    "resources": ["cpu_usage", "mem_usage"]
}

class Nursejackass:
    def __init__(self):
        self.meta_data = meta_data
        self.name = self.meta_data["name"]
        self.shared_data = {}
        self.core = None  # Assigned at runtime by DEVILCore
        self.ready = False

    # -------------------------- lifecycle --------------------------------
    def init(self):
        self.ready = False
        self.available_phrases = self._load_available_phrases()
        if self.available_phrases:
            log_system("Available phrase triggers loaded:", source=self.name)
            for phrase in sorted(self.available_phrases):
                log_system(f" â€¢ {phrase}", source=self.name)
        else:
            log_system("No phrase files detected. K.A.R.I. may be speechless.", source=self.name)
        if DEBUG:
            log_system("DEBUG enabled for module.", source=self.name)
        print("")  # aesthetics
        self.ready = True

    # --------------------------- utils -----------------------------------
    def log(self, message):
        log_system(message, source=self.name)

    def _current_mood(self):
        if MemoryCortex:
            try:
                return MemoryCortex().get_current_mood() or "neutral"
            except Exception:
                return "neutral"
        return "neutral"

    def _safe_phrase(self, module_key: str, tag: str, mood: str):
        # Guard against missing files/dirs; return a simple fallback string
        try:
            return get_phrase(module_key, tag, mood)
        except Exception as e:
            if DEBUG:
                self.log(f"get_phrase() failed for tag '{tag}' mood '{mood}': {e}")
            return f"[{self.name}] ({mood}) {tag}"

    def react(self, phrase_file, override_mood=None):
        mood = override_mood or self._current_mood()
        return self._safe_phrase("nursejackass", phrase_file, mood)

    def _load_available_phrases(self):
        phrases_path = os.path.join(os.path.dirname(__file__), "phrases")
        if not os.path.exists(phrases_path):
            return []
        subdirs = [f for f in os.listdir(phrases_path) if os.path.isdir(os.path.join(phrases_path, f))]
        return subdirs

    # -------------------------- diagnostics -------------------------------
    def report_alive(self):
        self.log("Status: Online and operational.")

    def display_info(self):
        for key, value in self.meta_data.items():
            self.log(f"{key}: {value}")

    def healthcheck(self):
        return {
            "name": self.name,
            "ready": self.ready,
            "has_core": self.core is not None
        }

    # ----------------------- DEVILCore data sync --------------------------
    def pulse(self):
        if hasattr(self, "core") and hasattr(self.core, "data_store") and self.core.data_store is not None:
            try:
                self.shared_data.update(self.core.data_store)  # shallow sync
                if DEBUG:
                    cpu = self.shared_data.get("cpu_usage")
                    mem = self.shared_data.get("mem_usage")
                    if cpu is not None or mem is not None:
                        self.log(f"Synced shared data (cpu={cpu}, mem={mem})")
                    else:
                        self.log("Synced shared data.")
            except Exception as e:
                self.log(f"Pulse sync failed: {e}")
        else:
            if DEBUG:
                self.log("No DEVILCore data_store to sync.")

    def push_shared_data(self):
        if hasattr(self, "core") and hasattr(self.core, "data_store") and self.core.data_store is not None:
            # Example place to publish back into core if needed
            # self.core.data_store["last_"+self.name] = "...timestamp..."
            pass

    def show_shared_data(self):
        if not self.shared_data:
            self.log("No shared data found.")
        else:
            self.log("Shared data:")
            for k, v in self.shared_data.items():
                self.log(f"  {k}: {v}")

    def collect_info(self):
        return {
            "Module Info": {
                "name": self.meta_data["name"],
                "version": self.meta_data["version"],
                "author": self.meta_data["author"],
                "description": self.meta_data["description"]
            },
            "State": {
                "ready": self.ready
            },
            "Actions": ['scanPorts', 'sarcasticComment', 'helpfulComment']
        }


    def scanports(self):
        self.log("Executing action: scanPorts")

    def sarcasticcomment(self):
        self.log("Executing action: sarcasticComment")

    def helpfulcomment(self):
        self.log("Executing action: helpfulComment")